import test from 'ava';
import avaRuleTester from 'eslint-ava-rule-tester';
import rule from '../rules/assertion-arguments';
import testCaseBuilder from './helpers/test-case';

const ruleTester = avaRuleTester(test, {
	env: {
		es6: true
	}
});

const missingError = 'Expected an assertion message, but found none.';
const foundError = 'Expected no assertion message, but found one.';
const tooFewError = n => `Not enough arguments. Expected at least ${n}.`;
const tooManyError = n => `Too many arguments. Expected at most ${n}.`;

const ruleId = 'assertion-arguments';
const basicTestCase = testCaseBuilder(ruleId);
const alwaysTestCase = testCaseBuilder(ruleId, [{message: 'always'}]);
const neverTestCase = testCaseBuilder(ruleId, [{message: 'never'}]);

ruleTester.run('assertion-arguments', rule, {
	valid: [
		basicTestCase('t.plan(1);'),
		basicTestCase('t.deepEqual({}, {}, \'message\');'),
		basicTestCase('t.fail(\'message\');'),
		basicTestCase('t.false(false, \'message\');'),
		basicTestCase('t.falsy(\'unicorn\', \'message\');'),
		basicTestCase('t.ifError(new Error(), \'message\');'),
		basicTestCase('t.is.skip(\'same\', \'same\', \'message\');'),
		basicTestCase('t.is(\'same\', \'same\', \'message\');'),
		basicTestCase('t.not(\'not\', \'same\', \'message\');'),
		basicTestCase('t.notDeepEqual({}, {a: true}, \'message\');'),
		basicTestCase('t.notThrows(Promise.resolve(), \'message\');'),
		basicTestCase('t.pass(\'message\');'),
		basicTestCase('t.regex(a, /a/, \'message\');'),
		basicTestCase('t.notRegex(a, /a/, \'message\');'),
		basicTestCase('t.skip.is(\'same\', \'same\', \'message\');'),
		basicTestCase('t.throws(Promise.reject(), Error, \'message\');'),
		basicTestCase('t.true(true, \'message\');'),
		basicTestCase('t.truthy(\'unicorn\', \'message\');'),
		basicTestCase('t.snapshot(value, \'message\');'),
		basicTestCase('t.context.plan();'),
		basicTestCase('foo.t.plan();'),
		// Shouldn't be triggered since it's not a test file
		basicTestCase('t.true(true);', undefined, true),

		basicTestCase('t.deepEqual({}, {});'),
		basicTestCase('t.fail();'),
		basicTestCase('t.false(false);'),
		basicTestCase('t.falsy(\'unicorn\');'),
		basicTestCase('t.ifError(new Error());'),
		basicTestCase('t.is.skip(\'same\', \'same\');'),
		basicTestCase('t.is(\'same\', \'same\');'),
		basicTestCase('t.not(\'not\', \'same\');'),
		basicTestCase('t.notDeepEqual({}, {a: true});'),
		basicTestCase('t.notThrows(Promise.resolve());'),
		basicTestCase('t.pass();'),
		basicTestCase('t.regex(a, /a/);'),
		basicTestCase('t.notRegex(a, /a/);'),
		basicTestCase('t.skip.is(\'same\', \'same\');'),
		basicTestCase('t.throws(Promise.reject());'),
		basicTestCase('t.throws(Promise.reject(), Error);'),
		basicTestCase('t.true(true);'),
		basicTestCase('t.truthy(\'unicorn\');'),
		basicTestCase('t.snapshot(value);'),
		// Shouldn't be triggered since it's not a test file
		basicTestCase('t.true(true, \'message\');', undefined, true),

		basicTestCase('t.context.a(1, 2, 3, 4);'),
		basicTestCase('t.context.is(1, 2, 3, 4);'),
		basicTestCase('t.foo(1, 2, 3, 4);'),

		alwaysTestCase('t.plan(1);'),
		alwaysTestCase('t.pass(\'message\');'),
		alwaysTestCase('t.fail(\'message\');'),
		alwaysTestCase('t.truthy(\'unicorn\', \'message\');'),
		alwaysTestCase('t.falsy(\'unicorn\', \'message\');'),
		alwaysTestCase('t.true(true, \'message\');'),
		alwaysTestCase('t.false(false, \'message\');'),
		alwaysTestCase('t.is(\'same\', \'same\', \'message\');'),
		alwaysTestCase('t.not(\'not\', \'same\', \'message\');'),
		alwaysTestCase('t.deepEqual({}, {}, \'message\');'),
		alwaysTestCase('t.notDeepEqual({}, {a: true}, \'message\');'),
		alwaysTestCase('t.throws(Promise.reject(), Error, \'message\');'),
		alwaysTestCase('t.notThrows(Promise.resolve(), \'message\');'),
		alwaysTestCase('t.regex(a, /a/, \'message\');'),
		alwaysTestCase('t.notRegex(a, /a/, \'message\');'),
		alwaysTestCase('t.ifError(new Error(), \'message\');'),
		alwaysTestCase('t.skip.is(\'same\', \'same\', \'message\');'),
		alwaysTestCase('t.is.skip(\'same\', \'same\', \'message\');'),
		alwaysTestCase('t.snapshot(value, \'message\');'),
		alwaysTestCase('t.context.a(1, 2, 3, 4);'),
		alwaysTestCase('t.context.is(1, 2, 3, 4);'),
		alwaysTestCase('t.foo(1, 2, 3, 4);'),
		// Shouldn't be triggered since it's not a test file
		alwaysTestCase('t.true(true);', undefined, true),

		neverTestCase('t.plan(1);'),
		neverTestCase('t.pass();'),
		neverTestCase('t.fail();'),
		neverTestCase('t.truthy(\'unicorn\');'),
		neverTestCase('t.falsy(\'unicorn\');'),
		neverTestCase('t.true(true);'),
		neverTestCase('t.false(false);'),
		neverTestCase('t.is(\'same\', \'same\');'),
		neverTestCase('t.not(\'not\', \'same\');'),
		neverTestCase('t.deepEqual({}, {});'),
		neverTestCase('t.notDeepEqual({}, {a: true});'),
		neverTestCase('t.throws(Promise.reject());'),
		neverTestCase('t.throws(Promise.reject(), Error);'),
		neverTestCase('t.notThrows(Promise.resolve());'),
		neverTestCase('t.regex(a, /a/);'),
		neverTestCase('t.notRegex(a, /a/);'),
		neverTestCase('t.ifError(new Error());'),
		neverTestCase('t.skip.is(\'same\', \'same\');'),
		neverTestCase('t.is.skip(\'same\', \'same\');'),
		neverTestCase('t.snapshot(value);'),
		neverTestCase('t.context.a(1, 2, 3, 4);'),
		neverTestCase('t.context.is(1, 2, 3, 4);'),
		neverTestCase('t.foo(1, 2, 3, 4);'),
		// Shouldn't be triggered since it's not a test file
		neverTestCase('t.true(true, \'message\');', undefined, true),

		// Special case for `t.end()``
		basicTestCase('t.end();'),
		basicTestCase('t.end(error);'),
		basicTestCase('t.end.skip();'),
		basicTestCase('t.end.skip(error);'),
		basicTestCase('t.skip.end();'),
		basicTestCase('t.skip.end(error);'),
		alwaysTestCase('t.end();'),
		alwaysTestCase('t.end(error);'),
		alwaysTestCase('t.end.skip();'),
		alwaysTestCase('t.end.skip(error);'),
		alwaysTestCase('t.skip.end();'),
		alwaysTestCase('t.skip.end(error);'),
		neverTestCase('t.end();'),
		neverTestCase('t.end(error);'),
		neverTestCase('t.end.skip();'),
		neverTestCase('t.end.skip(error);'),
		neverTestCase('t.skip.end();'),
		neverTestCase('t.skip.end(error);'),
	],
	invalid: [
		// Not enough arguments
		basicTestCase('t.plan();', tooFewError(1)),
		basicTestCase('t.truthy();', tooFewError(1)),
		basicTestCase('t.falsy();', tooFewError(1)),
		basicTestCase('t.true();', tooFewError(1)),
		basicTestCase('t.false();', tooFewError(1)),
		basicTestCase('t.is(\'same\');', tooFewError(2)),
		basicTestCase('t.not(\'not\');', tooFewError(2)),
		basicTestCase('t.deepEqual({});', tooFewError(2)),
		basicTestCase('t.notDeepEqual({});', tooFewError(2)),
		basicTestCase('t.throws();', tooFewError(1)),
		basicTestCase('t.notThrows();', tooFewError(1)),
		basicTestCase('t.regex(a);', tooFewError(2)),
		basicTestCase('t.notRegex(a);', tooFewError(2)),
		basicTestCase('t.ifError();', tooFewError(1)),
		basicTestCase('t.skip.is(\'same\');', tooFewError(2)),
		basicTestCase('t.is.skip(\'same\');', tooFewError(2)),
		basicTestCase('t.snapshot();', tooFewError(1)),

		// Too many arguments
		basicTestCase('t.plan(1, \'extra argument\');', tooManyError(1)),
		basicTestCase('t.pass(\'message\', \'extra argument\');', tooManyError(1)),
		basicTestCase('t.fail(\'message\', \'extra argument\');', tooManyError(1)),
		basicTestCase('t.truthy(\'unicorn\', \'message\', \'extra argument\');', tooManyError(2)),
		basicTestCase('t.falsy(\'unicorn\', \'message\', \'extra argument\');', tooManyError(2)),
		basicTestCase('t.true(true, \'message\', \'extra argument\');', tooManyError(2)),
		basicTestCase('t.false(false, \'message\', \'extra argument\');', tooManyError(2)),
		basicTestCase('t.is(\'same\', \'same\', \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.not(\'not\', \'same\', \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.deepEqual({}, {}, \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.notDeepEqual({}, {a: true}, \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.throws(Promise.reject(), Error, \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.notThrows(Promise.resolve(), \'message\', \'extra argument\');', tooManyError(2)),
		basicTestCase('t.regex(a, /a/, \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.notRegex(a, /a/, \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.ifError(new Error(), \'message\', \'extra argument\');', tooManyError(2)),
		basicTestCase('t.skip.is(\'same\', \'same\', \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.is.skip(\'same\', \'same\', \'message\', \'extra argument\');', tooManyError(3)),
		basicTestCase('t.snapshot(value, \'message\', \'extra argument\');', tooManyError(2)),

		alwaysTestCase('t.pass();', missingError),
		alwaysTestCase('t.fail();', missingError),
		alwaysTestCase('t.truthy(\'unicorn\');', missingError),
		alwaysTestCase('t.falsy(\'unicorn\');', missingError),
		alwaysTestCase('t.true(true);', missingError),
		alwaysTestCase('t.false(false);', missingError),
		alwaysTestCase('t.is(\'same\', \'same\');', missingError),
		alwaysTestCase('t.not(\'not\', \'same\');', missingError),
		alwaysTestCase('t.deepEqual({}, {});', missingError),
		alwaysTestCase('t.notDeepEqual({}, {a: true});', missingError),
		alwaysTestCase('t.throws(Promise.reject());', missingError),
		alwaysTestCase('t.throws(Promise.reject(), Error);', missingError),
		alwaysTestCase('t.notThrows(Promise.resolve());', missingError),
		alwaysTestCase('t.regex(a, /a/);', missingError),
		alwaysTestCase('t.notRegex(a, /a/);', missingError),
		alwaysTestCase('t.ifError(new Error());', missingError),
		alwaysTestCase('t.skip.is(\'same\', \'same\');', missingError),
		alwaysTestCase('t.is.skip(\'same\', \'same\');', missingError),
		alwaysTestCase('t.snapshot(value);', missingError),

		neverTestCase('t.pass(\'message\');', foundError),
		neverTestCase('t.fail(\'message\');', foundError),
		neverTestCase('t.truthy(\'unicorn\', \'message\');', foundError),
		neverTestCase('t.falsy(\'unicorn\', \'message\');', foundError),
		neverTestCase('t.true(true, \'message\');', foundError),
		neverTestCase('t.false(false, \'message\');', foundError),
		neverTestCase('t.is(\'same\', \'same\', \'message\');', foundError),
		neverTestCase('t.not(\'not\', \'same\', \'message\');', foundError),
		neverTestCase('t.deepEqual({}, {}, \'message\');', foundError),
		neverTestCase('t.notDeepEqual({}, {a: true}, \'message\');', foundError),
		neverTestCase('t.throws(Promise.reject(), Error, \'message\');', foundError),
		neverTestCase('t.notThrows(Promise.resolve(), \'message\');', foundError),
		neverTestCase('t.regex(a, /a/, \'message\');', foundError),
		neverTestCase('t.notRegex(a, /a/, \'message\');', foundError),
		neverTestCase('t.ifError(new Error(), \'message\');', foundError),
		neverTestCase('t.skip.is(\'same\', \'same\', \'message\');', foundError),
		neverTestCase('t.is.skip(\'same\', \'same\', \'message\');', foundError),
		neverTestCase('t.snapshot(value, \'message\');', foundError),

		basicTestCase('t.end(\'too many\', \'arguments\');', tooManyError(1)),
		basicTestCase('t.skip.end(\'too many\', \'arguments\');', tooManyError(1)),
		basicTestCase('t.end.skip(\'too many\', \'arguments\');', tooManyError(1))
	]
});
